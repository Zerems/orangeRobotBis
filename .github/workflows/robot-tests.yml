name: Robot Framework Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

# Permissions nécessaires pour publier les résultats
permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  robot-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        sudo apt-get install -y xvfb
        python -m pip install --upgrade pip
        pip install robotframework
        pip install robotframework-seleniumlibrary
        pip install robotframework-requests
        pip install robotframework-databaselibrary
        pip install robotframework-faker
        # Ajoutez ici d'autres dépendances spécifiques à votre projet
        
    - name: Install Firefox and GeckoDriver
      run: |
        # Supprimer Firefox snap et installer via apt
        sudo snap remove firefox || true
        sudo add-apt-repository ppa:mozillateam/ppa -y
        echo '
        Package: *
        Pin: release o=LP-PPA-mozillateam
        Pin-Priority: 1001
        ' | sudo tee /etc/apt/preferences.d/mozilla-firefox
        sudo apt-get update
        sudo apt-get install -y firefox
        # Télécharger la version compatible de GeckoDriver (0.36.0 pour Firefox 140.x)
        wget -O /tmp/geckodriver.tar.gz https://github.com/mozilla/geckodriver/releases/download/v0.36.0/geckodriver-v0.36.0-linux64.tar.gz
        sudo tar -xzf /tmp/geckodriver.tar.gz -C /usr/local/bin/
        sudo chmod +x /usr/local/bin/geckodriver
        # Vérifier l'installation
        firefox --version
        geckodriver --version
        
    - name: Run Robot Framework tests
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 5
        # Configuration Firefox pour CI/CD
        export MOZ_HEADLESS=1
        export MOZ_DISABLE_CONTENT_SANDBOX=1
        export PATH="/usr/local/bin:$PATH"
        # Options Firefox pour éviter les timeouts
        export FIREFOX_OPTIONS="--headless --no-sandbox --disable-dev-shm-usage --disable-gpu"
        mkdir -p Results
        # Lancer les tests Robot Framework
        robot --variable BROWSER:firefox \
              --variable FIREFOX_OPTIONS:"${FIREFOX_OPTIONS}" \
              --variable TIMEOUT:60 \
              --outputdir Results \
              Tests/ || true
        # Vérifier si les fichiers ont été générés
        ls -la Results/
        
    - name: Convert to JUnit XML
      if: always()
      run: |
        # Convertir le fichier output.xml en format JUnit
        if [ -f "Results/output.xml" ]; then
          python -m robot.rebot --output NONE --log NONE --report NONE --xunit Results/junit.xml Results/output.xml || true
        else
          echo "No output.xml found, creating empty JUnit file"
          mkdir -p Results
          echo '<?xml version="1.0" encoding="UTF-8"?><testsuites name="Robot Framework Tests" tests="0" failures="0" errors="0" time="0"></testsuites>' > Results/junit.xml
        fi
        # Vérifier le contenu du fichier JUnit
        if [ -f "Results/junit.xml" ]; then
          echo "JUnit file created successfully:"
          head -10 Results/junit.xml
        fi

    - name: Show failed tests (if any)
      if: failure()
      run: |
        if [ -f "Results/output.xml" ]; then
          cat Results/output.xml | grep -i failures || echo "No failures found in output.xml"
        else
          echo "No output.xml file found"
        fi
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: robot-results
        path: Results/
        
    # Utiliser les fichiers JUnit XML au lieu du format Robot Framework natif
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: Results/junit.xml
        check_name: "Robot Framework Test Results"
        
    - name: Robot Framework Report
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      uses: joonvena/robotframework-reporter-action@v2.4
      with:
        gh_access_token: ${{ secrets.GH_PAT }}
        report_path: Results

    - name: Fail workflow if tests failed
      if: always()
      run: |
        if grep -q '<failures' Results/output.xml; then
           echo "❌ Tests failed, marking the job as failed."
           exit 1
        else
            echo "✅ All tests passed."
        fi
